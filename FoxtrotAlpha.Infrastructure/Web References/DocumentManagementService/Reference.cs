//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace FoxtrotAlpha.Infrastructure.DocumentManagementService
{
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "Service1Soap", Namespace = "http://tempuri.org/")]
    public partial class Service1 : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback GetFileDetailsListOperationCompleted;

        private System.Threading.SendOrPostCallback GetFileDetailsOperationCompleted;

        private System.Threading.SendOrPostCallback CreateFolderOperationCompleted;

        private System.Threading.SendOrPostCallback CreateChildFolderOperationCompleted;

        private System.Threading.SendOrPostCallback PutFileOperationCompleted;

        private System.Threading.SendOrPostCallback GetFileOperationCompleted;

        private System.Threading.SendOrPostCallback GetTopLevelFolderIdOperationCompleted;

        private System.Threading.SendOrPostCallback GetChildFolderIdOperationCompleted;

        private System.Threading.SendOrPostCallback GetChildFolderIdByParentNameOperationCompleted;

        private System.Threading.SendOrPostCallback GetFolderContentsOperationCompleted;

        private System.Threading.SendOrPostCallback DoesFileExistOperationCompleted;

        private System.Threading.SendOrPostCallback DoesFileExistFileIdOperationCompleted;

        private System.Threading.SendOrPostCallback GetFilenameFromIdOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteFileOperationCompleted;

        private System.Threading.SendOrPostCallback SearchFileByFilenameOperationCompleted;

        private System.Threading.SendOrPostCallback GetFileParentOperationCompleted;

        private System.Threading.SendOrPostCallback GetFolderParentOperationCompleted;

        private System.Threading.SendOrPostCallback GetFoldernameParentOperationCompleted;

        private System.Threading.SendOrPostCallback UpdateFileOperationCompleted;

        private System.Threading.SendOrPostCallback GetFolderContentsDetailOperationCompleted;

        private System.Threading.SendOrPostCallback GetAllTopLevelFoldersOperationCompleted;

        private bool useDefaultCredentialsSetExplicitly;

        /// <remarks/>
        public Service1()
        {
            this.Url = global::FoxtrotAlpha.Infrastructure.Properties.Settings.Default.ContractTrackingManagement_Infrastructure_DocumentManagementService_Service1;
            if ((this.IsLocalFileSystemWebService(this.Url) == true))
            {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else
            {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        public new string Url
        {
            get
            {
                return base.Url;
            }
            set
            {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true)
                            && (this.useDefaultCredentialsSetExplicitly == false))
                            && (this.IsLocalFileSystemWebService(value) == false)))
                {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }

        public new bool UseDefaultCredentials
        {
            get
            {
                return base.UseDefaultCredentials;
            }
            set
            {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        /// <remarks/>
        public event GetFileDetailsListCompletedEventHandler GetFileDetailsListCompleted;

        /// <remarks/>
        public event GetFileDetailsCompletedEventHandler GetFileDetailsCompleted;

        /// <remarks/>
        public event CreateFolderCompletedEventHandler CreateFolderCompleted;

        /// <remarks/>
        public event CreateChildFolderCompletedEventHandler CreateChildFolderCompleted;

        /// <remarks/>
        public event PutFileCompletedEventHandler PutFileCompleted;

        /// <remarks/>
        public event GetFileCompletedEventHandler GetFileCompleted;

        /// <remarks/>
        public event GetTopLevelFolderIdCompletedEventHandler GetTopLevelFolderIdCompleted;

        /// <remarks/>
        public event GetChildFolderIdCompletedEventHandler GetChildFolderIdCompleted;

        /// <remarks/>
        public event GetChildFolderIdByParentNameCompletedEventHandler GetChildFolderIdByParentNameCompleted;

        /// <remarks/>
        public event GetFolderContentsCompletedEventHandler GetFolderContentsCompleted;

        /// <remarks/>
        public event DoesFileExistCompletedEventHandler DoesFileExistCompleted;

        /// <remarks/>
        public event DoesFileExistFileIdCompletedEventHandler DoesFileExistFileIdCompleted;

        /// <remarks/>
        public event GetFilenameFromIdCompletedEventHandler GetFilenameFromIdCompleted;

        /// <remarks/>
        public event DeleteFileCompletedEventHandler DeleteFileCompleted;

        /// <remarks/>
        public event SearchFileByFilenameCompletedEventHandler SearchFileByFilenameCompleted;

        /// <remarks/>
        public event GetFileParentCompletedEventHandler GetFileParentCompleted;

        /// <remarks/>
        public event GetFolderParentCompletedEventHandler GetFolderParentCompleted;

        /// <remarks/>
        public event GetFoldernameParentCompletedEventHandler GetFoldernameParentCompleted;

        /// <remarks/>
        public event UpdateFileCompletedEventHandler UpdateFileCompleted;

        /// <remarks/>
        public event GetFolderContentsDetailCompletedEventHandler GetFolderContentsDetailCompleted;

        /// <remarks/>
        public event GetAllTopLevelFoldersCompletedEventHandler GetAllTopLevelFoldersCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFileDetailsList", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DocumentObjectDetail[] GetFileDetailsList(long[] fileIds)
        {
            object[] results = this.Invoke("GetFileDetailsList", new object[] {
                        fileIds});
            return ((DocumentObjectDetail[])(results[0]));
        }

        /// <remarks/>
        public void GetFileDetailsListAsync(long[] fileIds)
        {
            this.GetFileDetailsListAsync(fileIds, null);
        }

        /// <remarks/>
        public void GetFileDetailsListAsync(long[] fileIds, object userState)
        {
            if ((this.GetFileDetailsListOperationCompleted == null))
            {
                this.GetFileDetailsListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileDetailsListOperationCompleted);
            }
            this.InvokeAsync("GetFileDetailsList", new object[] {
                        fileIds}, this.GetFileDetailsListOperationCompleted, userState);
        }

        private void OnGetFileDetailsListOperationCompleted(object arg)
        {
            if ((this.GetFileDetailsListCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileDetailsListCompleted(this, new GetFileDetailsListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFileDetails", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DocumentObjectDetail GetFileDetails(long fileId)
        {
            object[] results = this.Invoke("GetFileDetails", new object[] {
                        fileId});
            return ((DocumentObjectDetail)(results[0]));
        }

        /// <remarks/>
        public void GetFileDetailsAsync(long fileId)
        {
            this.GetFileDetailsAsync(fileId, null);
        }

        /// <remarks/>
        public void GetFileDetailsAsync(long fileId, object userState)
        {
            if ((this.GetFileDetailsOperationCompleted == null))
            {
                this.GetFileDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileDetailsOperationCompleted);
            }
            this.InvokeAsync("GetFileDetails", new object[] {
                        fileId}, this.GetFileDetailsOperationCompleted, userState);
        }

        private void OnGetFileDetailsOperationCompleted(object arg)
        {
            if ((this.GetFileDetailsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileDetailsCompleted(this, new GetFileDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateFolder", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long CreateFolder(string foldername)
        {
            object[] results = this.Invoke("CreateFolder", new object[] {
                        foldername});
            return ((long)(results[0]));
        }

        /// <remarks/>
        public void CreateFolderAsync(string foldername)
        {
            this.CreateFolderAsync(foldername, null);
        }

        /// <remarks/>
        public void CreateFolderAsync(string foldername, object userState)
        {
            if ((this.CreateFolderOperationCompleted == null))
            {
                this.CreateFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateFolderOperationCompleted);
            }
            this.InvokeAsync("CreateFolder", new object[] {
                        foldername}, this.CreateFolderOperationCompleted, userState);
        }

        private void OnCreateFolderOperationCompleted(object arg)
        {
            if ((this.CreateFolderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateFolderCompleted(this, new CreateFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateChildFolder", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long CreateChildFolder(string childFolderName, long parentFolderId)
        {
            object[] results = this.Invoke("CreateChildFolder", new object[] {
                        childFolderName,
                        parentFolderId});
            return ((long)(results[0]));
        }

        /// <remarks/>
        public void CreateChildFolderAsync(string childFolderName, long parentFolderId)
        {
            this.CreateChildFolderAsync(childFolderName, parentFolderId, null);
        }

        /// <remarks/>
        public void CreateChildFolderAsync(string childFolderName, long parentFolderId, object userState)
        {
            if ((this.CreateChildFolderOperationCompleted == null))
            {
                this.CreateChildFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateChildFolderOperationCompleted);
            }
            this.InvokeAsync("CreateChildFolder", new object[] {
                        childFolderName,
                        parentFolderId}, this.CreateChildFolderOperationCompleted, userState);
        }

        private void OnCreateChildFolderOperationCompleted(object arg)
        {
            if ((this.CreateChildFolderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateChildFolderCompleted(this, new CreateChildFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PutFile", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long PutFile(string fileName, long folderId, [System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")] byte[] fileStream)
        {
            object[] results = this.Invoke("PutFile", new object[] {
                        fileName,
                        folderId,
                        fileStream});
            return ((long)(results[0]));
        }

        /// <remarks/>
        public void PutFileAsync(string fileName, long folderId, byte[] fileStream)
        {
            this.PutFileAsync(fileName, folderId, fileStream, null);
        }

        /// <remarks/>
        public void PutFileAsync(string fileName, long folderId, byte[] fileStream, object userState)
        {
            if ((this.PutFileOperationCompleted == null))
            {
                this.PutFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPutFileOperationCompleted);
            }
            this.InvokeAsync("PutFile", new object[] {
                        fileName,
                        folderId,
                        fileStream}, this.PutFileOperationCompleted, userState);
        }

        private void OnPutFileOperationCompleted(object arg)
        {
            if ((this.PutFileCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PutFileCompleted(this, new PutFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFile", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")]
        public byte[] GetFile(long fileId)
        {
            object[] results = this.Invoke("GetFile", new object[] {
                        fileId});
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public void GetFileAsync(long fileId)
        {
            this.GetFileAsync(fileId, null);
        }

        /// <remarks/>
        public void GetFileAsync(long fileId, object userState)
        {
            if ((this.GetFileOperationCompleted == null))
            {
                this.GetFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileOperationCompleted);
            }
            this.InvokeAsync("GetFile", new object[] {
                        fileId}, this.GetFileOperationCompleted, userState);
        }

        private void OnGetFileOperationCompleted(object arg)
        {
            if ((this.GetFileCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileCompleted(this, new GetFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTopLevelFolderId", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long GetTopLevelFolderId(string folderName)
        {
            object[] results = this.Invoke("GetTopLevelFolderId", new object[] {
                        folderName});
            return ((long)(results[0]));
        }

        /// <remarks/>
        public void GetTopLevelFolderIdAsync(string folderName)
        {
            this.GetTopLevelFolderIdAsync(folderName, null);
        }

        /// <remarks/>
        public void GetTopLevelFolderIdAsync(string folderName, object userState)
        {
            if ((this.GetTopLevelFolderIdOperationCompleted == null))
            {
                this.GetTopLevelFolderIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTopLevelFolderIdOperationCompleted);
            }
            this.InvokeAsync("GetTopLevelFolderId", new object[] {
                        folderName}, this.GetTopLevelFolderIdOperationCompleted, userState);
        }

        private void OnGetTopLevelFolderIdOperationCompleted(object arg)
        {
            if ((this.GetTopLevelFolderIdCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTopLevelFolderIdCompleted(this, new GetTopLevelFolderIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetChildFolderId", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long GetChildFolderId(string folderName, long parentFolderId)
        {
            object[] results = this.Invoke("GetChildFolderId", new object[] {
                        folderName,
                        parentFolderId});
            return ((long)(results[0]));
        }

        /// <remarks/>
        public void GetChildFolderIdAsync(string folderName, long parentFolderId)
        {
            this.GetChildFolderIdAsync(folderName, parentFolderId, null);
        }

        /// <remarks/>
        public void GetChildFolderIdAsync(string folderName, long parentFolderId, object userState)
        {
            if ((this.GetChildFolderIdOperationCompleted == null))
            {
                this.GetChildFolderIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChildFolderIdOperationCompleted);
            }
            this.InvokeAsync("GetChildFolderId", new object[] {
                        folderName,
                        parentFolderId}, this.GetChildFolderIdOperationCompleted, userState);
        }

        private void OnGetChildFolderIdOperationCompleted(object arg)
        {
            if ((this.GetChildFolderIdCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetChildFolderIdCompleted(this, new GetChildFolderIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetChildFolderIdByParentName", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long GetChildFolderIdByParentName(string folderName, string parentFolderName)
        {
            object[] results = this.Invoke("GetChildFolderIdByParentName", new object[] {
                        folderName,
                        parentFolderName});
            return ((long)(results[0]));
        }

        /// <remarks/>
        public void GetChildFolderIdByParentNameAsync(string folderName, string parentFolderName)
        {
            this.GetChildFolderIdByParentNameAsync(folderName, parentFolderName, null);
        }

        /// <remarks/>
        public void GetChildFolderIdByParentNameAsync(string folderName, string parentFolderName, object userState)
        {
            if ((this.GetChildFolderIdByParentNameOperationCompleted == null))
            {
                this.GetChildFolderIdByParentNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetChildFolderIdByParentNameOperationCompleted);
            }
            this.InvokeAsync("GetChildFolderIdByParentName", new object[] {
                        folderName,
                        parentFolderName}, this.GetChildFolderIdByParentNameOperationCompleted, userState);
        }

        private void OnGetChildFolderIdByParentNameOperationCompleted(object arg)
        {
            if ((this.GetChildFolderIdByParentNameCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetChildFolderIdByParentNameCompleted(this, new GetChildFolderIdByParentNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFolderContents", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DocumentObject[] GetFolderContents(long folderId)
        {
            object[] results = this.Invoke("GetFolderContents", new object[] {
                        folderId});
            return ((DocumentObject[])(results[0]));
        }

        /// <remarks/>
        public void GetFolderContentsAsync(long folderId)
        {
            this.GetFolderContentsAsync(folderId, null);
        }

        /// <remarks/>
        public void GetFolderContentsAsync(long folderId, object userState)
        {
            if ((this.GetFolderContentsOperationCompleted == null))
            {
                this.GetFolderContentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFolderContentsOperationCompleted);
            }
            this.InvokeAsync("GetFolderContents", new object[] {
                        folderId}, this.GetFolderContentsOperationCompleted, userState);
        }

        private void OnGetFolderContentsOperationCompleted(object arg)
        {
            if ((this.GetFolderContentsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFolderContentsCompleted(this, new GetFolderContentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DoesFileExist", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DoesFileExist(string topFolderName, string filename)
        {
            object[] results = this.Invoke("DoesFileExist", new object[] {
                        topFolderName,
                        filename});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void DoesFileExistAsync(string topFolderName, string filename)
        {
            this.DoesFileExistAsync(topFolderName, filename, null);
        }

        /// <remarks/>
        public void DoesFileExistAsync(string topFolderName, string filename, object userState)
        {
            if ((this.DoesFileExistOperationCompleted == null))
            {
                this.DoesFileExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoesFileExistOperationCompleted);
            }
            this.InvokeAsync("DoesFileExist", new object[] {
                        topFolderName,
                        filename}, this.DoesFileExistOperationCompleted, userState);
        }

        private void OnDoesFileExistOperationCompleted(object arg)
        {
            if ((this.DoesFileExistCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoesFileExistCompleted(this, new DoesFileExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DoesFileExistFileId", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long DoesFileExistFileId(string topFolderName, string filename)
        {
            object[] results = this.Invoke("DoesFileExistFileId", new object[] {
                        topFolderName,
                        filename});
            return ((long)(results[0]));
        }

        /// <remarks/>
        public void DoesFileExistFileIdAsync(string topFolderName, string filename)
        {
            this.DoesFileExistFileIdAsync(topFolderName, filename, null);
        }

        /// <remarks/>
        public void DoesFileExistFileIdAsync(string topFolderName, string filename, object userState)
        {
            if ((this.DoesFileExistFileIdOperationCompleted == null))
            {
                this.DoesFileExistFileIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoesFileExistFileIdOperationCompleted);
            }
            this.InvokeAsync("DoesFileExistFileId", new object[] {
                        topFolderName,
                        filename}, this.DoesFileExistFileIdOperationCompleted, userState);
        }

        private void OnDoesFileExistFileIdOperationCompleted(object arg)
        {
            if ((this.DoesFileExistFileIdCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoesFileExistFileIdCompleted(this, new DoesFileExistFileIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFilenameFromId", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFilenameFromId(long fileId)
        {
            object[] results = this.Invoke("GetFilenameFromId", new object[] {
                        fileId});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetFilenameFromIdAsync(long fileId)
        {
            this.GetFilenameFromIdAsync(fileId, null);
        }

        /// <remarks/>
        public void GetFilenameFromIdAsync(long fileId, object userState)
        {
            if ((this.GetFilenameFromIdOperationCompleted == null))
            {
                this.GetFilenameFromIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFilenameFromIdOperationCompleted);
            }
            this.InvokeAsync("GetFilenameFromId", new object[] {
                        fileId}, this.GetFilenameFromIdOperationCompleted, userState);
        }

        private void OnGetFilenameFromIdOperationCompleted(object arg)
        {
            if ((this.GetFilenameFromIdCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFilenameFromIdCompleted(this, new GetFilenameFromIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteFile", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteFile(long fileId)
        {
            this.Invoke("DeleteFile", new object[] {
                        fileId});
        }

        /// <remarks/>
        public void DeleteFileAsync(long fileId)
        {
            this.DeleteFileAsync(fileId, null);
        }

        /// <remarks/>
        public void DeleteFileAsync(long fileId, object userState)
        {
            if ((this.DeleteFileOperationCompleted == null))
            {
                this.DeleteFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteFileOperationCompleted);
            }
            this.InvokeAsync("DeleteFile", new object[] {
                        fileId}, this.DeleteFileOperationCompleted, userState);
        }

        private void OnDeleteFileOperationCompleted(object arg)
        {
            if ((this.DeleteFileCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SearchFileByFilename", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FileObject[] SearchFileByFilename(string filename)
        {
            object[] results = this.Invoke("SearchFileByFilename", new object[] {
                        filename});
            return ((FileObject[])(results[0]));
        }

        /// <remarks/>
        public void SearchFileByFilenameAsync(string filename)
        {
            this.SearchFileByFilenameAsync(filename, null);
        }

        /// <remarks/>
        public void SearchFileByFilenameAsync(string filename, object userState)
        {
            if ((this.SearchFileByFilenameOperationCompleted == null))
            {
                this.SearchFileByFilenameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchFileByFilenameOperationCompleted);
            }
            this.InvokeAsync("SearchFileByFilename", new object[] {
                        filename}, this.SearchFileByFilenameOperationCompleted, userState);
        }

        private void OnSearchFileByFilenameOperationCompleted(object arg)
        {
            if ((this.SearchFileByFilenameCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchFileByFilenameCompleted(this, new SearchFileByFilenameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFileParent", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long GetFileParent(long fileID)
        {
            object[] results = this.Invoke("GetFileParent", new object[] {
                        fileID});
            return ((long)(results[0]));
        }

        /// <remarks/>
        public void GetFileParentAsync(long fileID)
        {
            this.GetFileParentAsync(fileID, null);
        }

        /// <remarks/>
        public void GetFileParentAsync(long fileID, object userState)
        {
            if ((this.GetFileParentOperationCompleted == null))
            {
                this.GetFileParentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileParentOperationCompleted);
            }
            this.InvokeAsync("GetFileParent", new object[] {
                        fileID}, this.GetFileParentOperationCompleted, userState);
        }

        private void OnGetFileParentOperationCompleted(object arg)
        {
            if ((this.GetFileParentCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileParentCompleted(this, new GetFileParentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFolderParent", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public long GetFolderParent(long folderID)
        {
            object[] results = this.Invoke("GetFolderParent", new object[] {
                        folderID});
            return ((long)(results[0]));
        }

        /// <remarks/>
        public void GetFolderParentAsync(long folderID)
        {
            this.GetFolderParentAsync(folderID, null);
        }

        /// <remarks/>
        public void GetFolderParentAsync(long folderID, object userState)
        {
            if ((this.GetFolderParentOperationCompleted == null))
            {
                this.GetFolderParentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFolderParentOperationCompleted);
            }
            this.InvokeAsync("GetFolderParent", new object[] {
                        folderID}, this.GetFolderParentOperationCompleted, userState);
        }

        private void OnGetFolderParentOperationCompleted(object arg)
        {
            if ((this.GetFolderParentCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFolderParentCompleted(this, new GetFolderParentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFoldernameParent", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFoldernameParent(long fileID)
        {
            object[] results = this.Invoke("GetFoldernameParent", new object[] {
                        fileID});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void GetFoldernameParentAsync(long fileID)
        {
            this.GetFoldernameParentAsync(fileID, null);
        }

        /// <remarks/>
        public void GetFoldernameParentAsync(long fileID, object userState)
        {
            if ((this.GetFoldernameParentOperationCompleted == null))
            {
                this.GetFoldernameParentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFoldernameParentOperationCompleted);
            }
            this.InvokeAsync("GetFoldernameParent", new object[] {
                        fileID}, this.GetFoldernameParentOperationCompleted, userState);
        }

        private void OnGetFoldernameParentOperationCompleted(object arg)
        {
            if ((this.GetFoldernameParentCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFoldernameParentCompleted(this, new GetFoldernameParentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateFile", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateFile(long fileId, [System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")] byte[] fileStream)
        {
            this.Invoke("UpdateFile", new object[] {
                        fileId,
                        fileStream});
        }

        /// <remarks/>
        public void UpdateFileAsync(long fileId, byte[] fileStream)
        {
            this.UpdateFileAsync(fileId, fileStream, null);
        }

        /// <remarks/>
        public void UpdateFileAsync(long fileId, byte[] fileStream, object userState)
        {
            if ((this.UpdateFileOperationCompleted == null))
            {
                this.UpdateFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateFileOperationCompleted);
            }
            this.InvokeAsync("UpdateFile", new object[] {
                        fileId,
                        fileStream}, this.UpdateFileOperationCompleted, userState);
        }

        private void OnUpdateFileOperationCompleted(object arg)
        {
            if ((this.UpdateFileCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFolderContentsDetail", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DocumentObjectDetail[] GetFolderContentsDetail(long folderId)
        {
            object[] results = this.Invoke("GetFolderContentsDetail", new object[] {
                        folderId});
            return ((DocumentObjectDetail[])(results[0]));
        }

        /// <remarks/>
        public void GetFolderContentsDetailAsync(long folderId)
        {
            this.GetFolderContentsDetailAsync(folderId, null);
        }

        /// <remarks/>
        public void GetFolderContentsDetailAsync(long folderId, object userState)
        {
            if ((this.GetFolderContentsDetailOperationCompleted == null))
            {
                this.GetFolderContentsDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFolderContentsDetailOperationCompleted);
            }
            this.InvokeAsync("GetFolderContentsDetail", new object[] {
                        folderId}, this.GetFolderContentsDetailOperationCompleted, userState);
        }

        private void OnGetFolderContentsDetailOperationCompleted(object arg)
        {
            if ((this.GetFolderContentsDetailCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFolderContentsDetailCompleted(this, new GetFolderContentsDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllTopLevelFolders", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DocumentObject[] GetAllTopLevelFolders()
        {
            object[] results = this.Invoke("GetAllTopLevelFolders", new object[0]);
            return ((DocumentObject[])(results[0]));
        }

        /// <remarks/>
        public void GetAllTopLevelFoldersAsync()
        {
            this.GetAllTopLevelFoldersAsync(null);
        }

        /// <remarks/>
        public void GetAllTopLevelFoldersAsync(object userState)
        {
            if ((this.GetAllTopLevelFoldersOperationCompleted == null))
            {
                this.GetAllTopLevelFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllTopLevelFoldersOperationCompleted);
            }
            this.InvokeAsync("GetAllTopLevelFolders", new object[0], this.GetAllTopLevelFoldersOperationCompleted, userState);
        }

        private void OnGetAllTopLevelFoldersOperationCompleted(object arg)
        {
            if ((this.GetAllTopLevelFoldersCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllTopLevelFoldersCompleted(this, new GetAllTopLevelFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }

        private bool IsLocalFileSystemWebService(string url)
        {
            if (((url == null)
                        || (url == string.Empty)))
            {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024)
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0)))
            {
                return true;
            }
            return false;
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1055.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
    public partial class DocumentObjectDetail
    {

        private long objectDetailIdField;

        private string objectDetailNameField;

        private DocumentObjectDetailType objectDetailTypeField;

        private System.DateTime objectDateCreatedField;

        /// <remarks/>
        public long objectDetailId
        {
            get
            {
                return this.objectDetailIdField;
            }
            set
            {
                this.objectDetailIdField = value;
            }
        }

        /// <remarks/>
        public string objectDetailName
        {
            get
            {
                return this.objectDetailNameField;
            }
            set
            {
                this.objectDetailNameField = value;
            }
        }

        /// <remarks/>
        public DocumentObjectDetailType objectDetailType
        {
            get
            {
                return this.objectDetailTypeField;
            }
            set
            {
                this.objectDetailTypeField = value;
            }
        }

        /// <remarks/>
        public System.DateTime objectDateCreated
        {
            get
            {
                return this.objectDateCreatedField;
            }
            set
            {
                this.objectDateCreatedField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1055.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
    public enum DocumentObjectDetailType
    {

        /// <remarks/>
        Folder,

        /// <remarks/>
        File,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1055.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
    public partial class FileObject
    {

        private long fileIdField;

        private string fileNameField;

        private System.DateTime dateCreatedField;

        /// <remarks/>
        public long FileId
        {
            get
            {
                return this.fileIdField;
            }
            set
            {
                this.fileIdField = value;
            }
        }

        /// <remarks/>
        public string FileName
        {
            get
            {
                return this.fileNameField;
            }
            set
            {
                this.fileNameField = value;
            }
        }

        /// <remarks/>
        public System.DateTime DateCreated
        {
            get
            {
                return this.dateCreatedField;
            }
            set
            {
                this.dateCreatedField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1055.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
    public partial class DocumentObject
    {

        private long objectIdField;

        private string objectNameField;

        private DocumentObjectType objectTypeField;

        /// <remarks/>
        public long objectId
        {
            get
            {
                return this.objectIdField;
            }
            set
            {
                this.objectIdField = value;
            }
        }

        /// <remarks/>
        public string objectName
        {
            get
            {
                return this.objectNameField;
            }
            set
            {
                this.objectNameField = value;
            }
        }

        /// <remarks/>
        public DocumentObjectType objectType
        {
            get
            {
                return this.objectTypeField;
            }
            set
            {
                this.objectTypeField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1055.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://tempuri.org/")]
    public enum DocumentObjectType
    {

        /// <remarks/>
        Folder,

        /// <remarks/>
        File,
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetFileDetailsListCompletedEventHandler(object sender, GetFileDetailsListCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileDetailsListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetFileDetailsListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public DocumentObjectDetail[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((DocumentObjectDetail[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetFileDetailsCompletedEventHandler(object sender, GetFileDetailsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetFileDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public DocumentObjectDetail Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((DocumentObjectDetail)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CreateFolderCompletedEventHandler(object sender, CreateFolderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public long Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CreateChildFolderCompletedEventHandler(object sender, CreateChildFolderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateChildFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateChildFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public long Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void PutFileCompletedEventHandler(object sender, PutFileCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PutFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal PutFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public long Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetFileCompletedEventHandler(object sender, GetFileCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public byte[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetTopLevelFolderIdCompletedEventHandler(object sender, GetTopLevelFolderIdCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTopLevelFolderIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetTopLevelFolderIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public long Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetChildFolderIdCompletedEventHandler(object sender, GetChildFolderIdCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetChildFolderIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetChildFolderIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public long Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetChildFolderIdByParentNameCompletedEventHandler(object sender, GetChildFolderIdByParentNameCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetChildFolderIdByParentNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetChildFolderIdByParentNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public long Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetFolderContentsCompletedEventHandler(object sender, GetFolderContentsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFolderContentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetFolderContentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public DocumentObject[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((DocumentObject[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DoesFileExistCompletedEventHandler(object sender, DoesFileExistCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoesFileExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DoesFileExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DoesFileExistFileIdCompletedEventHandler(object sender, DoesFileExistFileIdCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoesFileExistFileIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DoesFileExistFileIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public long Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetFilenameFromIdCompletedEventHandler(object sender, GetFilenameFromIdCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFilenameFromIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetFilenameFromIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DeleteFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void SearchFileByFilenameCompletedEventHandler(object sender, SearchFileByFilenameCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchFileByFilenameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal SearchFileByFilenameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public FileObject[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((FileObject[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetFileParentCompletedEventHandler(object sender, GetFileParentCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileParentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetFileParentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public long Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetFolderParentCompletedEventHandler(object sender, GetFolderParentCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFolderParentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetFolderParentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public long Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetFoldernameParentCompletedEventHandler(object sender, GetFoldernameParentCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFoldernameParentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetFoldernameParentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetFolderContentsDetailCompletedEventHandler(object sender, GetFolderContentsDetailCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFolderContentsDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetFolderContentsDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public DocumentObjectDetail[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((DocumentObjectDetail[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetAllTopLevelFoldersCompletedEventHandler(object sender, GetAllTopLevelFoldersCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllTopLevelFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAllTopLevelFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public DocumentObject[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((DocumentObject[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591